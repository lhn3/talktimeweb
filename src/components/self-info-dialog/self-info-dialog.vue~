<!--用户详情弹窗-->
<template>
  <el-dialog
    append-to-body
    align-center
    :class="$style['self-info-dialog']"
    :close-on-click-modal="false"
    :model-value="modelValue"
    :before-close="reset"
    custom-class="tt-dialog"
    width="800"
  >
    <div class="self-info">
      <!--性别-->
      <div class="self-sex" @click="sexChange">
        <svg-icon
          v-if="state.userInfo.sex === 0"
          size="20"
          name="icon-nv"
          color="#f56c6c"
          svg-style="margin-left: 5px"
        />
        <svg-icon
          v-if="state.userInfo.sex === 1"
          size="20"
          name="icon-nan"
          color="#42a3f6"
          svg-style="margin-left: 5px"
        />
      </div>
      <!--头像-->
      <div class="self-avatar" @click="avatarUpload.click()">
        <input id="avatarUpload" type="file" ref="avatarUpload" v-show="false" />
        <el-image style="width: 100px; height: 100px" :src="state.userInfo.avatar" :initial-index="4" fit="cover" />
        <div class="edit-avatar">更换头像</div>
      </div>
      <!--用户名-->
      <div class="self-username">
        <el-input style="width: 200px" :maxlength="15" placeholder="输入昵称" v-model="state.userInfo.username" />
      </div>
      <!--个性签名-->
      <div class="self-selfStyle">
        <div class="selfStyle-label">个性签名</div>
        <el-input
          type="textarea"
          style="width: 600px"
          :maxlength="100"
          :rows="3"
          placeholder="展示自己的个性~"
          v-model="state.userInfo.selfStyle"
        />
      </div>
    </div>

    <!--徽章-->
    <div class="self-badge">
      <horizontal-scrollingz height="180px">
        <template #default>
          <div class="slot">
            <div class="img"></div>
            <div class="img"></div>
            <div class="img"></div>
            <div class="img"></div>
            <div class="img"></div>
            <div class="img"></div>
            <div class="img"></div>
            <div class="img"></div>
            <div class="img"></div>
            <div class="img"></div>
          </div>
        </template>
      </horizontal-scrollingz>
    </div>

    <div class="self-btn">
      <el-button @click="reset">取消</el-button>
      <el-button type="primary" @click="updateUserInfo">保存</el-button>
    </div>
  </el-dialog>
</template>
<script setup>
  import { defineProps, defineEmits, ref, watch, nextTick, reactive } from 'vue'
  import { useUserStore } from '@/stores'
  import { getBase64 } from '@/utils/utils'
  import localCache from '@/utils/cache'
  import { ElMessage } from 'element-plus'
  import HorizontalScrollingz from '@/components/horizontal-scrolling/horizontal-scrolling.vue'

  const avatarUpload = ref()
  const user = useUserStore()
  const emit = defineEmits(['update:modelValue'])
  const props = defineProps({
    modelValue: {
      type: Boolean,
      default: false
    }
  })
  const state = reactive({
    loading: false,
    userInfo: {}
  })
  let imageFormats = /\.(jpg|jpeg|png|gif)$/i

  /**改变头像*/
  watch(
    () => props.modelValue,
    value => {
      if (!value) return
      state.userInfo = { ...user.userInfo }
      nextTick(() => {
        avatarUpload.value.addEventListener('change', async e => {
          let file = e.target.files[0]
          if (!imageFormats.test(file.name)) return ElMessage.error('图片格式不正确！')
          let res = await getBase64(file)
          state.userInfo.avatar = res || ''
        })
      })
    }
  )

  /**改变性别*/
  const sexChange = () => {
    if (state.userInfo.sex) {
      state.userInfo.sex = 0
    } else {
      state.userInfo.sex = 1
    }
  }

  /**重置信息*/
  const reset = () => {
    emit('update:modelValue', false)
  }

  /**保存用户信息*/
  const updateUserInfo = () => {
    //发送请求保存用户信息
    for (let key in state.userInfo) {
      user.userInfo[key] = state.userInfo[key]
    }
    localCache.setCache('talkTime-userInfo', state.userInfo)
    reset()
  }
</script>

<style module lang="scss">
  .self-info-dialog {
    height: 500px;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 3px 10px 5px rgba(0, 0, 0, 0.3);
    background: var(--card-bg);
    position: relative;
    :global {
      .self-info {
        user-select: none;
        width: 100%;
        padding: 15px 20px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        position: relative;
        .self-sex {
          position: absolute;
          z-index: 999;
          top: 20px;
          margin-left: 100px;
        }
        .self-avatar {
          width: 100px;
          aspect-ratio: 1/1;
          border-radius: 50px;
          cursor: pointer;
          position: relative;
          overflow: hidden;
          .edit-avatar {
            position: absolute;
            bottom: 0;
            left: 0;
            background-color: rgba(0, 0, 0, 0.8);
            font-size: 12px;
            color: #fff;
            line-height: 35px;
            width: 100%;
            text-align: center;
            opacity: 0;
            transition: opacity 0.5s;
          }
        }
        .self-avatar:hover {
          .edit-avatar {
            opacity: 1;
          }
        }
        .self-username {
          margin: 10px 0;
          .el-input__wrapper {
            background-color: transparent;
            box-shadow: none;
            .el-input__inner {
              color: var(--text-1);
              text-align: center;
            }
          }
          .el-input__wrapper.is-focus {
            box-shadow: 0 0 0 1px #42a3f6 inset;
          }
          .el-input__wrapper:focus-visible {
            outline: none;
          }
        }
        .self-selfStyle {
          color: var(--text-1);
          display: flex;
          align-items: center;
          .el-textarea__inner {
            $b: var(--text-1);
            background-color: rgba($b, 0.1);
            color: var(--text-1);
            box-shadow: none;
            word-wrap: break-word;
            word-break: break-all;
            position: relative;
          }
          .el-textarea__inner:focus {
            outline: 0;
            box-shadow: 0 0 0 1px var(--el-input-focus-border-color) inset;
          }
          .selfStyle-label {
            margin-right: 5px;
            min-width: 60px;
          }
        }
      }

      .self-badge {
        width: 100%;
        padding: 0 20px;
        .slot {
          height: 100%;
          display: flex;
          .img {
            height: 100%;
            width: 200px;
            margin-right: 10px;
          }
          @for $i from 1 through 10 {
            .img:nth-child(#{$i}) {
              background: url('https://picsum.photos/200/200?id=#{$i}') no-repeat 100% / cover;
            }
          }
          .img:last-child {
            margin-right: 0;
          }
        }
      }
      .self-btn {
        position: absolute;
        z-index: 999;
        right: 10px;
        bottom: 10px;
      }
    }
  }
</style>
